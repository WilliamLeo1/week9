# -*- coding: utf-8 -*-
"""
Created on Tue Feb  2 16:13:40 2021

@author: bootl
"""
import matplotlib
#matplotlib.use('TkAgg')
import tkinter
import random
import operator
import matplotlib.pyplot
import agentframework
import csv
import matplotlib.animation

num_of_agents=50
num_of_iterations=100
num_of_frames=50
neighbourhood=10

# Create the environment
environment = []
f = open("in.txt")
for line in f:
    parsed_line = str.split(line,",")
    rowlist = []
    for word in parsed_line:
        rowlist.append(float(word))
    environment.append(rowlist)
matplotlib.pyplot.imshow(environment)
matplotlib.pyplot.show()    
f.close()

fig = matplotlib.pyplot.figure(figsize=(7, 7))
ax = fig.add_axes([0, 0, 1, 1])

#ax.set_autoscale_on(false)


# Create the agents
agents=[]
for i in range(num_of_agents):   
    agents.append(agentframework.Agent(i, environment, agents))
    
carry_on = True    


# Main run
def update(frame_number):
    
    fig.clear()
    global carry_on
    
    for j in range(num_of_iterations):
        for i in range(num_of_agents):
            #print(agents[i])
            #print("x", agents[i].x, "y", agents[i].y)
            agents[i].move()
            #print("x", agents[i].x, "y", agents[i].y)
            #print(agents[i])
            agents[i].eat()
            agents[i].share_with_neighbours(neighbourhood)
            #print(agents[i])
    
    #stopping condition
    count = 0
    for i in range(num_of_agents):
        if agents[1].store > 1000: 
            count = count + 1
    if (count > num_of_agents / 2):
        carry_on = False
        print("stopping condition")        
        
    ## Print out all agents
    #print("Print out all agents")
    ##print(agents)
    #for i in range(num_of_agents):
    #    print(agents[i])
    
    
    # print(max(agents, key=operator.itemgetter(1)))
    
    # Plot the agents
    matplotlib.pyplot.ylim(0, 299)
    matplotlib.pyplot.xlim(0, 299)
    matplotlib.pyplot.imshow(environment)
    for i in range(num_of_agents):
        matplotlib.pyplot.scatter(agents[i].x,agents[i].y)
    #a=max(agents, key=operator.itemgetter(1))
    #matplotlib.pyplot.scatter(a[0], a[1], color='green')

def gen_function(b = [0]):
    a = 0
    global carry_on #Not actually needed as we're not assigning, but clearer
    while (a < num_of_frames) & (carry_on) :
        yield a			# Returns control and waits next call.
        a = a + 1

#run function
#def run():
#    animation = matplotlib.animation.FuncAnimation(fig, update, frames=gen_function, repeat=False)
#    canvas.show()


#creating web page
#root = tkinter.Tk()
#root.wm_title("Model")
#canvas = matplotlib.backends.backend_tkagg.FigureCanvasTkAgg(fig, master=root)
#canvas._tkcanvas.pack(side=tkinter.TOP, fill=tkinter.BOTH, expand=1)
#menu_bar = tkinter.Menu(root)
#root.config(menu=menu_bar)
#model_menu = tkinter.Menu(menu_bar)
#menu_bar.add_cascade(label="Model", menu=model_menu)
#model_menu.add_command(label="Run model", command=run)

#tkinter.mainloop()




#animation = matplotlib.animation.FuncAnimation(fig, update, interval=1, repeat=False, frames=num_of_iterations)
animation = matplotlib.animation.FuncAnimation(fig, update, frames=gen_function, repeat=False)
matplotlib.pyplot.show()